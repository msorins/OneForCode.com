{"version":3,"sources":["../rxjs/src/observable/BoundCallbackObservable.ts","../rxjs/src/observable/bindCallback.ts","../rxjs/src/add/observable/bindCallback.ts","../rxjs/src/observable/BoundNodeCallbackObservable.ts","../rxjs/src/observable/bindNodeCallback.ts","../rxjs/src/add/observable/bindNodeCallback.ts","../rxjs/src/observable/combineLatest.ts","../rxjs/src/add/observable/combineLatest.ts","../rxjs/src/observable/concat.ts","../rxjs/src/add/observable/concat.ts","../rxjs/src/observable/DeferObservable.ts","../rxjs/src/observable/defer.ts","../rxjs/src/add/observable/defer.ts","../rxjs/src/observable/empty.ts","../rxjs/src/add/observable/empty.ts","../rxjs/src/observable/ForkJoinObservable.ts","../rxjs/src/observable/forkJoin.ts","../rxjs/src/add/observable/forkJoin.ts","../rxjs/src/observable/from.ts","../rxjs/src/add/observable/from.ts","../rxjs/src/observable/FromEventObservable.ts","../rxjs/src/observable/fromEvent.ts","../rxjs/src/add/observable/fromEvent.ts","../rxjs/src/observable/FromEventPatternObservable.ts","../rxjs/src/observable/fromEventPattern.ts","../rxjs/src/add/observable/fromEventPattern.ts","../rxjs/src/observable/fromPromise.ts","../rxjs/src/add/observable/fromPromise.ts","../rxjs/src/observable/GenerateObservable.ts","../rxjs/src/add/observable/generate.ts","../rxjs/src/observable/IfObservable.ts","../rxjs/src/observable/if.ts","../rxjs/src/add/observable/if.ts","../rxjs/src/observable/IntervalObservable.ts","../rxjs/src/observable/interval.ts","../rxjs/src/add/observable/interval.ts","../rxjs/src/observable/merge.ts","../rxjs/src/add/observable/merge.ts","../rxjs/src/add/observable/race.ts","../rxjs/src/observable/NeverObservable.ts","../rxjs/src/observable/never.ts","../rxjs/src/add/observable/never.ts","../rxjs/src/observable/of.ts","../rxjs/src/add/observable/of.ts","../rxjs/src/add/observable/onErrorResumeNext.ts","../rxjs/src/observable/PairsObservable.ts","../rxjs/src/observable/pairs.ts","../rxjs/src/add/observable/pairs.ts","../rxjs/src/observable/RangeObservable.ts","../rxjs/src/observable/range.ts","../rxjs/src/add/observable/range.ts","../rxjs/src/observable/UsingObservable.ts","../rxjs/src/observable/using.ts","../rxjs/src/add/observable/using.ts","../rxjs/src/observable/ErrorObservable.ts","../rxjs/src/observable/throw.ts","../rxjs/src/add/observable/throw.ts","../rxjs/src/observable/TimerObservable.ts","../rxjs/src/observable/timer.ts","../rxjs/src/add/observable/timer.ts","../rxjs/src/observable/zip.ts","../rxjs/src/add/observable/zip.ts","../rxjs/src/observable/dom/ajax.ts","../rxjs/src/add/observable/dom/ajax.ts","../rxjs/src/util/assign.ts","../rxjs/src/observable/dom/WebSocketSubject.ts","../rxjs/src/observable/dom/webSocket.ts","../rxjs/src/add/observable/dom/webSocket.ts","../rxjs/src/operator/buffer.ts","../rxjs/src/add/operator/buffer.ts","../rxjs/src/operator/bufferCount.ts","../rxjs/src/add/operator/bufferCount.ts","../rxjs/src/operator/bufferTime.ts","../rxjs/src/add/operator/bufferTime.ts","../rxjs/src/operator/bufferToggle.ts","../rxjs/src/add/operator/bufferToggle.ts","../rxjs/src/operator/bufferWhen.ts","../rxjs/src/add/operator/bufferWhen.ts","../rxjs/src/operator/catch.ts","../rxjs/src/add/operator/catch.ts","../rxjs/src/operator/combineAll.ts","../rxjs/src/add/operator/combineAll.ts","../rxjs/src/operator/combineLatest.ts","../rxjs/src/add/operator/combineLatest.ts","../rxjs/src/add/operator/concat.ts","../rxjs/src/operator/concatAll.ts","../rxjs/src/add/operator/concatAll.ts","../rxjs/src/operator/concatMap.ts","../rxjs/src/add/operator/concatMap.ts","../rxjs/src/operator/concatMapTo.ts","../rxjs/src/add/operator/concatMapTo.ts","../rxjs/src/operator/count.ts","../rxjs/src/add/operator/count.ts","../rxjs/src/operator/dematerialize.ts","../rxjs/src/add/operator/dematerialize.ts","../rxjs/src/operator/debounce.ts","../rxjs/src/add/operator/debounce.ts","../rxjs/src/operator/debounceTime.ts","../rxjs/src/add/operator/debounceTime.ts","../rxjs/src/operator/defaultIfEmpty.ts","../rxjs/src/add/operator/defaultIfEmpty.ts","../rxjs/src/operator/delay.ts","../rxjs/src/add/operator/delay.ts","../rxjs/src/operator/delayWhen.ts","../rxjs/src/add/operator/delayWhen.ts","../rxjs/src/util/Set.ts","../rxjs/src/operator/distinct.ts","../rxjs/src/add/operator/distinct.ts","../rxjs/src/add/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilKeyChanged.ts","../rxjs/src/add/operator/distinctUntilKeyChanged.ts","../rxjs/src/operator/do.ts","../rxjs/src/add/operator/do.ts","../rxjs/src/operator/exhaust.ts","../rxjs/src/add/operator/exhaust.ts","../rxjs/src/operator/exhaustMap.ts","../rxjs/src/add/operator/exhaustMap.ts","../rxjs/src/operator/expand.ts","../rxjs/src/add/operator/expand.ts","../rxjs/src/operator/elementAt.ts","../rxjs/src/add/operator/elementAt.ts","../rxjs/src/add/operator/filter.ts","../rxjs/src/operator/finally.ts","../rxjs/src/add/operator/finally.ts","../rxjs/src/add/operator/find.ts","../rxjs/src/operator/find.ts","../rxjs/src/operator/findIndex.ts","../rxjs/src/add/operator/findIndex.ts","../rxjs/src/operator/first.ts","../rxjs/src/add/operator/first.ts","../rxjs/src/util/MapPolyfill.ts","../rxjs/src/util/Map.ts","../rxjs/src/util/FastMap.ts","../rxjs/src/operator/groupBy.ts","../rxjs/src/add/operator/groupBy.ts","../rxjs/src/util/noop.ts","../rxjs/src/operator/ignoreElements.ts","../rxjs/src/add/operator/ignoreElements.ts","../rxjs/src/operator/isEmpty.ts","../rxjs/src/add/operator/isEmpty.ts","../rxjs/src/operator/audit.ts","../rxjs/src/add/operator/audit.ts","../rxjs/src/operator/auditTime.ts","../rxjs/src/add/operator/auditTime.ts","../rxjs/src/operator/last.ts","../rxjs/src/add/operator/last.ts","../rxjs/src/operator/let.ts","../rxjs/src/add/operator/let.ts","../rxjs/src/operator/every.ts","../rxjs/src/add/operator/every.ts","../rxjs/src/add/operator/map.ts","../rxjs/src/operator/mapTo.ts","../rxjs/src/add/operator/mapTo.ts","../rxjs/src/operator/materialize.ts","../rxjs/src/add/operator/materialize.ts","../rxjs/src/operator/max.ts","../rxjs/src/add/operator/max.ts","../rxjs/src/operator/merge.ts","../rxjs/src/add/operator/merge.ts","../rxjs/src/add/operator/mergeAll.ts","../rxjs/src/operator/mergeMap.ts","../rxjs/src/add/operator/mergeMap.ts","../rxjs/src/operator/mergeMapTo.ts","../rxjs/src/add/operator/mergeMapTo.ts","../rxjs/src/operator/mergeScan.ts","../rxjs/src/add/operator/mergeScan.ts","../rxjs/src/operator/min.ts","../rxjs/src/add/operator/min.ts","../rxjs/src/add/operator/multicast.ts","../rxjs/src/add/operator/observeOn.ts","../rxjs/src/observable/PromiseObservable.ts","../rxjs/src/observable/IteratorObservable.ts","../rxjs/src/observable/ArrayLikeObservable.ts","../rxjs/src/observable/FromObservable.ts","../rxjs/src/operator/onErrorResumeNext.ts","../rxjs/src/add/operator/onErrorResumeNext.ts","../rxjs/src/operator/pairwise.ts","../rxjs/src/add/operator/pairwise.ts","../rxjs/src/util/not.ts","../rxjs/src/operator/filter.ts","../rxjs/src/operator/partition.ts","../rxjs/src/add/operator/partition.ts","../rxjs/src/operator/pluck.ts","../rxjs/src/add/operator/pluck.ts","../rxjs/src/operator/publish.ts","../rxjs/src/add/operator/publish.ts","../rxjs/src/operator/publishBehavior.ts","../rxjs/src/add/operator/publishBehavior.ts","../rxjs/src/operator/publishReplay.ts","../rxjs/src/add/operator/publishReplay.ts","../rxjs/src/operator/publishLast.ts","../rxjs/src/add/operator/publishLast.ts","../rxjs/src/operator/race.ts","../rxjs/src/add/operator/race.ts","../rxjs/src/operator/reduce.ts","../rxjs/src/add/operator/reduce.ts","../rxjs/src/operator/repeat.ts","../rxjs/src/add/operator/repeat.ts","../rxjs/src/operator/repeatWhen.ts","../rxjs/src/add/operator/repeatWhen.ts","../rxjs/src/operator/retry.ts","../rxjs/src/add/operator/retry.ts","../rxjs/src/operator/retryWhen.ts","../rxjs/src/add/operator/retryWhen.ts","../rxjs/src/operator/sample.ts","../rxjs/src/add/operator/sample.ts","../rxjs/src/operator/sampleTime.ts","../rxjs/src/add/operator/sampleTime.ts","../rxjs/src/operator/scan.ts","../rxjs/src/add/operator/scan.ts","../rxjs/src/operator/sequenceEqual.ts","../rxjs/src/add/operator/sequenceEqual.ts","../rxjs/src/operator/multicast.ts","../rxjs/src/operator/share.ts","../rxjs/src/add/operator/share.ts","../rxjs/src/operator/single.ts","../rxjs/src/add/operator/single.ts","../rxjs/src/operator/skip.ts","../rxjs/src/add/operator/skip.ts","../rxjs/src/operator/skipUntil.ts","../rxjs/src/add/operator/skipUntil.ts","../rxjs/src/operator/skipWhile.ts","../rxjs/src/add/operator/skipWhile.ts","../rxjs/src/operator/mergeAll.ts","../rxjs/src/operator/concat.ts","../rxjs/src/operator/startWith.ts","../rxjs/src/add/operator/startWith.ts","../rxjs/src/util/isNumeric.ts","../rxjs/src/observable/SubscribeOnObservable.ts","../rxjs/src/operator/subscribeOn.ts","../rxjs/src/add/operator/subscribeOn.ts","../rxjs/src/operator/switch.ts","../rxjs/src/add/operator/switch.ts","../rxjs/src/operator/switchMap.ts","../rxjs/src/add/operator/switchMap.ts","../rxjs/src/operator/switchMapTo.ts","../rxjs/src/add/operator/switchMapTo.ts","../rxjs/src/operator/take.ts","../rxjs/src/add/operator/take.ts","../rxjs/src/operator/takeLast.ts","../rxjs/src/add/operator/takeLast.ts","../rxjs/src/operator/takeUntil.ts","../rxjs/src/add/operator/takeUntil.ts","../rxjs/src/operator/takeWhile.ts","../rxjs/src/add/operator/takeWhile.ts","../rxjs/src/operator/throttle.ts","../rxjs/src/add/operator/throttle.ts","../rxjs/src/operator/throttleTime.ts","../rxjs/src/add/operator/throttleTime.ts","../rxjs/src/add/operator/timeInterval.ts","../rxjs/src/operator/timeout.ts","../rxjs/src/add/operator/timeout.ts","../rxjs/src/util/isDate.ts","../rxjs/src/operator/timeoutWith.ts","../rxjs/src/add/operator/timeoutWith.ts","../rxjs/src/add/operator/timestamp.ts","../rxjs/src/operator/toArray.ts","../rxjs/src/add/operator/toArray.ts","../rxjs/src/operator/toPromise.ts","../rxjs/src/add/operator/toPromise.ts","../rxjs/src/operator/window.ts","../rxjs/src/add/operator/window.ts","../rxjs/src/operator/windowCount.ts","../rxjs/src/add/operator/windowCount.ts","../rxjs/src/operator/windowTime.ts","../rxjs/src/add/operator/windowTime.ts","../rxjs/src/operator/windowToggle.ts","../rxjs/src/add/operator/windowToggle.ts","../rxjs/src/operator/windowWhen.ts","../rxjs/src/add/operator/windowWhen.ts","../rxjs/src/operator/withLatestFrom.ts","../rxjs/src/add/operator/withLatestFrom.ts","../rxjs/src/add/operator/zip.ts","../rxjs/src/observable/ScalarObservable.ts","../rxjs/src/observable/EmptyObservable.ts","../rxjs/src/util/isScheduler.ts","../rxjs/src/observable/ArrayObservable.ts","../rxjs/src/OuterSubscriber.ts","../rxjs/src/util/isPromise.ts","../rxjs/src/InnerSubscriber.ts","../rxjs/src/util/subscribeToResult.ts","../rxjs/src/operator/zip.ts","../rxjs/src/operator/zipAll.ts","../rxjs/src/add/operator/zipAll.ts","../rxjs/src/AsyncSubject.ts","../rxjs/src/operator/observeOn.ts","../rxjs/src/ReplaySubject.ts","../rxjs/src/BehaviorSubject.ts","../rxjs/src/observable/ConnectableObservable.ts","../rxjs/src/util/EmptyError.ts","../rxjs/src/util/ArgumentOutOfRangeError.ts","../rxjs/src/util/TimeoutError.ts","../rxjs/src/operator/timeInterval.ts","../rxjs/src/operator/timestamp.ts","../rxjs/src/Notification.ts","../rxjs/src/testing/ColdObservable.ts","../rxjs/src/util/ObjectUnsubscribedError.ts","../rxjs/src/SubjectSubscription.ts","../rxjs/src/Subject.ts","../rxjs/src/testing/SubscriptionLoggable.ts","../rxjs/src/util/applyMixins.ts","../rxjs/src/testing/HotObservable.ts","../rxjs/src/testing/SubscriptionLog.ts","../rxjs/src/testing/TestScheduler.ts","../rxjs/src/scheduler/VirtualTimeScheduler.ts","../rxjs/src/util/toSubscriber.ts","../rxjs/src/Observable.ts","../rxjs/src/Observer.ts","../rxjs/src/Subscriber.ts","../rxjs/src/operator/map.ts","../rxjs/src/observable/dom/AjaxObservable.ts","../rxjs/src/util/Immediate.ts","../rxjs/src/scheduler/AsapAction.ts","../rxjs/src/scheduler/AsapScheduler.ts","../rxjs/src/scheduler/asap.ts","../rxjs/src/scheduler/async.ts","../rxjs/src/scheduler/QueueAction.ts","../rxjs/src/scheduler/QueueScheduler.ts","../rxjs/src/scheduler/queue.ts","../rxjs/src/util/isArray.ts","../rxjs/src/util/isObject.ts","../rxjs/src/util/isFunction.ts","../rxjs/src/util/tryCatch.ts","../rxjs/src/util/errorObject.ts","../rxjs/src/util/UnsubscriptionError.ts","../rxjs/src/Subscription.ts","../rxjs/src/scheduler/Action.ts","../rxjs/src/scheduler/AsyncAction.ts","../rxjs/src/util/AnimationFrame.ts","../rxjs/src/scheduler/AnimationFrameAction.ts","../rxjs/src/Scheduler.ts","../rxjs/src/scheduler/AsyncScheduler.ts","../rxjs/src/scheduler/AnimationFrameScheduler.ts","../rxjs/src/scheduler/animationFrame.ts","../rxjs/src/symbol/rxSubscriber.ts","../rxjs/src/symbol/iterator.ts","../rxjs/src/util/root.ts","../rxjs/src/symbol/observable.ts","../rxjs/src/Rx.ts"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","scheduler","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","result","concat","subscribe","state","self","result_2","add","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","concatStatic","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","FromObservable_1","from","FromObservable","from_1","isNodeStyleEventEmmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","Object","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","TypeError","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","mergeStatic","race_1","race","raceStatic","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","ErrorObservable_1","_throw","throw_1","throw","isDate_1","TimerObservable","dueTime","Number","isDate","now","initialDelay","action","TimerObservable_1","timer","timer_1","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","assignImpl","k","hasOwnProperty","getAssign","root","assign","root_1","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","protocol","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","BufferOperator","BufferSubscriber","_next","push","buffer_1","bufferCount","bufferSize","startBufferEvery","BufferCountOperator","BufferCountSubscriber","buffers","startOn","splice","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","context","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","remove","spliceIndex","indexOf","bufferTime_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","_catch","CatchOperator","caught","CatchSubscriber","isStopped","catch_1","catch","combineAll","combineAll_1","unshift","none","CombineLatestSubscriber","active","observable","toRespond","unused","oldVal","_tryProject","slice","concatAll","mergeAll_1","MergeAllOperator","concatAll_1","concatMap","mergeMap_1","MergeMapOperator","concatMap_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","concatMapTo_1","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","observe","dematerialize_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","hasValue","durationSubscription","_tryNext","emitValue","duration","debounce_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","delay","absoluteDelay","delayFor","Math","abs","DelayOperator","Notification_1","DelaySubscriber","errored","time","notification","delay_1","max","_schedule","scheduleNotification","message","DelayMessage","Notification","createNext","createComplete","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","delayWhen_1","minimalSetImpl","MinimalSet","_values","has","defineProperty","clear","Set","distinct","keySelector","flushes","DistinctOperator","Set_1","DistinctSubscriber","_useKeySelector","_finalizeNext","distinct_1","distinctUntilChanged_1","distinctUntilChanged","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","do_1","do","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","exhaust_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","expand","concurrent","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","elementAt","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","elementAt_1","filter_1","filter","_finally","callback","FinallyOperator","FinallySubscriber","finally_1","finally","find_1","find","thisArg","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","findIndex_1","first","FirstOperator","EmptyError_1","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError","first_1","MapPolyfill","size","_keys","get","set","delete","forEach","cb","MapPolyfill_1","Map","FastMap","groupBy","elementSelector","subjectSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","auditTime_1","last","LastOperator","LastSubscriber","last_1","letProto","let_1","let","letBind","every","EveryOperator","EverySubscriber","everyValueMatch","every_1","map_1","map","mapTo","MapToOperator","MapToSubscriber","mapTo_1","materialize","MaterializeOperator","MaterializeSubscriber","createError","materialize_1","comparer","reduce_1","ReduceOperator","max_1","mergeAll","mergeMap","MergeMapSubscriber","_innerSub","ish","_notifyResultSelector","flatMap","mergeMapTo","MergeMapToSubscriber","flatMapTo","mergeScan","seed","MergeScanOperator","MergeScanSubscriber","acc","mergeScan_1","min","min_1","multicast_1","multicast","observeOn_1","observeOn","promise","_isScalar","then","setTimeout","getIterator","iterator_1","$$iterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","iterator","hasError","done","return","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isArrayLike","$$observable","isPromise","ObserveOnSubscriber","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","pairwise_1","not","pred","notPred","FilterOperator","FilterSubscriber","partition","not_1","partition_1","pluck","properties","plucker","props","mapper","currentProp","p","pluck_1","publish","publish_1","publishBehavior","BehaviorSubject_1","BehaviorSubject","publishBehavior_1","publishReplay","windowTime","publishReplay_1","publishLast","publishLast_1","RaceOperator","RaceSubscriber","hasFirst","subscriptions","reduce","accumulator","hasSeed","ReduceSubscriber","_tryReduce","repeat","RepeatOperator","RepeatSubscriber","repeat_1","repeatWhen","notifier","RepeatWhenOperator","RepeatWhenSubscriber","notifications","retries","retriesSubscription","repeatWhen_1","retry","RetryOperator","RetrySubscriber","retry_1","retryWhen","RetryWhenOperator","RetryWhenSubscriber","errors","retryWhen_1","sample","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","sampleTime_1","scan","ScanOperator","ScanSubscriber","_seed","scan_1","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","b","areEqual","nextB","sequenceEqual_1","subjectOrSubjectFactory","subjectFactory","MulticastOperator","connectable","ConnectableObservable_1","connectableObservableDescriptor","shareSubjectFactory","share","refCount","share_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","skip","SkipOperator","SkipSubscriber","skip_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","MergeAllSubscriber","startWith","array","startWith_1","val","parseFloat","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switch_1","switch","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","take","TakeOperator","TakeSubscriber","take_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeLast_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","timeInterval_1","timeInterval","timeout","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","TimeoutError","errorInstance","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","timeout_1","Date","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","timeoutWith_1","timestamp_1","timestamp","toArray","ToArrayOperator","ToArraySubscriber","toArray_1","toPromise","PromiseCtor","Rx","config","Promise","resolve","reject","toPromise_1","window","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","windowTimeSpan","windowCreationInterval","WindowTimeOperator","dispatchWindowTimeSpanOnly","dispatchWindowCreation","timeSpanState","dispatchWindowClose","closeWindow","WindowTimeSubscriber","window_2","window_3","window_4","windowTime_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowWhen","unsubscribeClosingNotification","closingNotification","windowWhen_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","zipProto","InnerSubscriber","outerSubscriber","InnerSubscriber_1","item","obs","isObject_1","isObject","msg","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","zipAll","zipAll_1","hasNext","EMPTY","thrownError","ObserveOnOperator","scheduleMessage","ObserveOnMessage","queue_1","ObjectUnsubscribedError_1","SubjectSubscription_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","ObjectUnsubscribedError","SubjectSubscription","eventsCount","spliceCount","_value","getValue","ConnectableObservable","_refCount","getSubject","_subject","connect","connection","_connection","ConnectableSubscriber","RefCountOperator","writable","SubjectSubscriber","refCounter","RefCountSubscriber","sharedConnection","name","stack","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimestampOperator","Timestamp","TimestampSubscriber","kind","accept","toObservable","undefinedValueNotification","completeNotification","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","frame","applyMixins","SubscriptionLoggable","subscriberIndex","rxSubscriber_1","$$rxSubscriber","copy","asObservable","SubscriptionLog_1","SubscriptionLog","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","actions","execute","AsyncScheduler","work","id","requestAsyncId","sort","sortActions","recycleAsyncId","AsyncAction","toSubscriber","Observer_1","toSubscriber_1","observerOrNext","sink","destinationOrNext","SafeSubscriber","_parent","bind","_context","__tryOrSetError","__tryOrUnsub","fn","MapOperator","MapSubscriber","getCORSRequest","XMLHttpRequest","xhr","withCredentials","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxGetJSON","responseType","response","urlOrRequest","request","createXHR","crossDomain","prop","AjaxSubscriber","post","put","getJSON","FormData","serializeBody","AjaxResponse","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","xhrTimeout","progressSubscriber","AjaxTimeoutError","xhrReadyStateChange","status_1","status","responseText","AjaxError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","onreadystatechange","abort","originalEvent","responseXML","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","QueueAction","_execute","QueueScheduler","QueueAction_1","QueueScheduler_1","tryCatcher","tryCatchTarget","UnsubscriptionError","flattenUnsubscriptionErrors","errs","UnsubscriptionError_1","hasErrors","_subscriptions","trial","sub","teardown","childSub","ChildSubscription","subscriptionIndex","Action","Action_1","pending","setInterval","clearInterval","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrame","AnimationFrame_1","AnimationFrameAction","Scheduler","Scheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","Symbol","for","symbolIteratorPonyfill","global","getSymbolObservable","TestScheduler_1","animationFrame_1","rxSubscriber"],"mappings":"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","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T> }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result. The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   * \n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmmitter(sourceObj: any): sourceObj is NodeStyleEventEmmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console everytime a click\n   * // occurs on the document.\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *  \n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *  \n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function): void} removeHandler A function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler: (handler: Function) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler: (handler: Function) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    this._callAddHandler(handler, subscriber);\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler);\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): void {\n    try {\n      this.addHandler(handler);\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { GenerateObservable } from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { raceStatic } from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNextStatic } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable<T> extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: T, scheduler?: IScheduler): ErrorObservable<T> {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: T, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * @param urlConfigOrSource\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = this.count++;\n    const { destination, bufferSize, startBufferEvery, buffers } = this;\n    const startOn = (startBufferEvery == null) ? bufferSize : startBufferEvery;\n\n    if (count % startOn === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:disable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.unsubscribe();\n      (<any>this.destination).remove(this);\n      subscribeToResult(this, result);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <any>observables[0];\n  }\n\n  observables.unshift(this);\n\n  return this.lift.call(new ArrayObservable(observables), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * \n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting an value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<T>): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n * \n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * \n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * \n * @param {function} [keySelector] optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n * \n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n * \n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * \n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * \n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n * \n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, true, thisArg));\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:disable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n * \n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x \n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n * \n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n * \n * @see {@link min}\n * \n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return this.lift.call(mergeStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...Observable} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * \n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>, project: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(project, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.project, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.project)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n * \n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n * \n * @see {@link max}\n * \n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { $$iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { $$observable } from '../symbol/observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *  \n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *  \n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate, thisArg),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: selector<T>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(this: Observable<T>, bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: IScheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  return this.lift.call(raceStatic<T>(this, ...observables));\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T) => R, seed?: R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ReduceOperator(accumulator, seed, hasSeed));\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => R, private seed?: R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n  acc: T | R;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => R,\n              seed: R,\n              private hasSeed: boolean) {\n    super(destination);\n    this.acc = seed;\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular IScheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the IScheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.\n * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * IScheduler.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the IScheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier, this));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  complete() {\n    if (!this.isStopped) {\n\n      let notifications = this.notifications;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        notifications = new Subject();\n        retries = tryCatch(this.notifier)(notifications);\n        if (retries === errorObject) {\n          return super.complete();\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.notifications = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.notifications = notifications;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * IScheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the IScheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ScanOperator(accumulator, seed, hasSeed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R, private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo the observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: selector<T>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  if (typeof selector === 'function') {\n    return this.lift(new MulticastOperator(subjectFactory, selector));\n  }\n\n  const connectable: any = Object.create(this, connectableObservableDescriptor);\n  connectable.source = this;\n  connectable.subjectFactory = subjectFactory;\n\n  return <ConnectableObservable<T>> connectable;\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport class MulticastOperator<T> implements Operator<T, T> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(concurrent));\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return this.lift.call(concatStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  let scheduler: IScheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  if (scheduler === null && observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  let scheduler = <IScheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the IScheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified IScheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return this.lift(new SubscribeOnOperator<T>(scheduler, delay));\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new SwitchOperator());\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\n\n/**\n * @param {number} due\n * @param {Scheduler} [scheduler]\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout(): void {\n    this.error(this.errorInstance);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:disable:max-line-length */\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.closed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { root } from '../util/root';\n\n/* tslint:disable:max-line-length */\nexport function toPromise<T>(this: Observable<T>): Promise<T>;\nexport function toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(this: Observable<T>, PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: typeof toPromise;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: IScheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      let window = this.openWindow();\n      const closeState = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      let window = this.openWindow();\n      const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T) {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  closeWindow(window: Subject<T>) {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\ninterface TimeSpanOnlyState<T> {\n  window: Subject<any>;\n  windowTimeSpan: number;\n  subscriber: WindowTimeSubscriber<T>;\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>) {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    window.complete();\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\ninterface Context<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface DispatchArg<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: Context<T>;\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  let { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  let window = subscriber.openWindow();\n  let action = this;\n  let context: Context<T> = { action, subscription: <any>null };\n  const timeSpanState: DispatchArg<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, window, context } = arg;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArray } from './isArray';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { $$observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  } else if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[$$iterator] === 'function') {\n    const iterator = <any>result[$$iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { $$iterator } from '../symbol/iterator';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return this.lift.call(zipStatic<R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each \n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values. \n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs \n * // { age: 7, name: 'Foo', isDev: true }\n * // { age: 5, name: 'Bar', isDev: true }\n * // { age: 9, name: 'Beer', isDev: false }\n * \n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic, Subscription } from '../Subscription';\nimport { Action } from '../scheduler/Action';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination, subscription } = arg;\n    notification.observe(destination);\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    const message = new ObserveOnMessage(notification, this.destination);\n    message.subscription = this.add(\n        this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, message)\n    );\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  public subscription: Subscription;\n\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subscribe: { value: (<any> ConnectableObservable.prototype)._subscribe },\n  getSubject: { value: (<any> ConnectableObservable.prototype).getSubject },\n  connect: { value: (<any> ConnectableObservable.prototype).connect },\n  refCount: { value: (<any> ConnectableObservable.prototype).refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return this.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\n  constructor(private scheduler: IScheduler) {\n  }\n\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\n    return source.subscribe(new TimestampSubscriber(observer, this.scheduler));\n  }\n}\n\nclass TimestampSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const now = this.scheduler.now();\n\n    this.destination.next(new Timestamp(value, now));\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { Subject } from '../Subject';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): Observable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): Subject<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { $$rxSubscriber } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { $$observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: <R>(this: Observable<T>, subscriber: Subscriber<R>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this._subscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parent: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parent } = this;\n      if (!_parent.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parent, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._error) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parent.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parent.syncErrorValue = err;\n        _parent.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._complete) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parent } = this;\n    this._context = null;\n    this._parent = null;\n    _parent.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  private _subscriptions: ISubscription[];\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const { _unsubscribe, _subscriptions } = (<any> this);\n\n    (<any> this)._subscriptions = null;\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      let index = -1;\n      const len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let sub = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        sub = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (sub.closed || typeof sub.unsubscribe !== 'function') {\n          return sub;\n        } else if (this.closed) {\n          sub.unsubscribe();\n          return sub;\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const childSub = new ChildSubscription(sub, this);\n    this._subscriptions = this._subscriptions || [];\n    this._subscriptions.push(childSub);\n    return childSub;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n\n    // HACK: This might be redundant because of the logic in `add()`\n    if (subscription == null   || (\n        subscription === this) || (\n        subscription === Subscription.EMPTY)) {\n      return;\n    }\n\n    const subscriptions = (<any> this)._subscriptions;\n\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\nexport class ChildSubscription extends Subscription {\n  constructor(private _innerSub: ISubscription, private _parent: Subscription) {\n    super();\n  }\n\n  _unsubscribe() {\n    const { _innerSub, _parent } = this;\n    _parent.remove(this);\n    _innerSub.unsubscribe();\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const $$iterator = symbolIteratorPonyfill(root);","declare let global: NodeJS.Global;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\n/**\n * window: browser in DOM main thread\n * self: browser in WebWorker\n * global: Node.js/other\n */\nexport const root: any = (\n     typeof window == 'object' && window.window === window && window\n  || typeof self == 'object' && self.self === self && self\n  || typeof global == 'object' && global.global === global && global\n);\n\nif (!root) {\n  throw new Error('RxJS could not find any global context (window, self, global)');\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const $$observable = getSymbolObservable(root);","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { $$rxSubscriber as rxSubscriber } from './symbol/rxSubscriber';\nimport { $$iterator as iterator } from './symbol/iterator';\nimport { $$observable as observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}