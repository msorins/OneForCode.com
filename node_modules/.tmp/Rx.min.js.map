{"version":3,"sources":["../rxjs/src/observable/BoundCallbackObservable.ts","../rxjs/src/observable/bindCallback.ts","../rxjs/src/add/observable/bindCallback.ts","../rxjs/src/observable/BoundNodeCallbackObservable.ts","../rxjs/src/observable/bindNodeCallback.ts","../rxjs/src/add/observable/bindNodeCallback.ts","../rxjs/src/observable/combineLatest.ts","../rxjs/src/add/observable/combineLatest.ts","../rxjs/src/observable/concat.ts","../rxjs/src/add/observable/concat.ts","../rxjs/src/observable/DeferObservable.ts","../rxjs/src/observable/defer.ts","../rxjs/src/add/observable/defer.ts","../rxjs/src/observable/empty.ts","../rxjs/src/add/observable/empty.ts","../rxjs/src/observable/ForkJoinObservable.ts","../rxjs/src/observable/forkJoin.ts","../rxjs/src/add/observable/forkJoin.ts","../rxjs/src/observable/from.ts","../rxjs/src/add/observable/from.ts","../rxjs/src/observable/FromEventObservable.ts","../rxjs/src/observable/fromEvent.ts","../rxjs/src/add/observable/fromEvent.ts","../rxjs/src/observable/FromEventPatternObservable.ts","../rxjs/src/observable/fromEventPattern.ts","../rxjs/src/add/observable/fromEventPattern.ts","../rxjs/src/observable/fromPromise.ts","../rxjs/src/add/observable/fromPromise.ts","../rxjs/src/observable/GenerateObservable.ts","../rxjs/src/add/observable/generate.ts","../rxjs/src/observable/IfObservable.ts","../rxjs/src/observable/if.ts","../rxjs/src/add/observable/if.ts","../rxjs/src/observable/IntervalObservable.ts","../rxjs/src/observable/interval.ts","../rxjs/src/add/observable/interval.ts","../rxjs/src/observable/merge.ts","../rxjs/src/add/observable/merge.ts","../rxjs/src/add/observable/race.ts","../rxjs/src/observable/NeverObservable.ts","../rxjs/src/observable/never.ts","../rxjs/src/add/observable/never.ts","../rxjs/src/observable/of.ts","../rxjs/src/add/observable/of.ts","../rxjs/src/add/observable/onErrorResumeNext.ts","../rxjs/src/observable/PairsObservable.ts","../rxjs/src/observable/pairs.ts","../rxjs/src/add/observable/pairs.ts","../rxjs/src/observable/RangeObservable.ts","../rxjs/src/observable/range.ts","../rxjs/src/add/observable/range.ts","../rxjs/src/observable/UsingObservable.ts","../rxjs/src/observable/using.ts","../rxjs/src/add/observable/using.ts","../rxjs/src/observable/ErrorObservable.ts","../rxjs/src/observable/throw.ts","../rxjs/src/add/observable/throw.ts","../rxjs/src/observable/TimerObservable.ts","../rxjs/src/observable/timer.ts","../rxjs/src/add/observable/timer.ts","../rxjs/src/observable/zip.ts","../rxjs/src/add/observable/zip.ts","../rxjs/src/observable/dom/ajax.ts","../rxjs/src/add/observable/dom/ajax.ts","../rxjs/src/util/assign.ts","../rxjs/src/observable/dom/WebSocketSubject.ts","../rxjs/src/observable/dom/webSocket.ts","../rxjs/src/add/observable/dom/webSocket.ts","../rxjs/src/operator/buffer.ts","../rxjs/src/add/operator/buffer.ts","../rxjs/src/operator/bufferCount.ts","../rxjs/src/add/operator/bufferCount.ts","../rxjs/src/operator/bufferTime.ts","../rxjs/src/add/operator/bufferTime.ts","../rxjs/src/operator/bufferToggle.ts","../rxjs/src/add/operator/bufferToggle.ts","../rxjs/src/operator/bufferWhen.ts","../rxjs/src/add/operator/bufferWhen.ts","../rxjs/src/operator/cache.ts","../rxjs/src/add/operator/cache.ts","../rxjs/src/operator/catch.ts","../rxjs/src/add/operator/catch.ts","../rxjs/src/operator/combineAll.ts","../rxjs/src/add/operator/combineAll.ts","../rxjs/src/operator/combineLatest.ts","../rxjs/src/add/operator/combineLatest.ts","../rxjs/src/add/operator/concat.ts","../rxjs/src/operator/concatAll.ts","../rxjs/src/add/operator/concatAll.ts","../rxjs/src/operator/concatMap.ts","../rxjs/src/add/operator/concatMap.ts","../rxjs/src/operator/concatMapTo.ts","../rxjs/src/add/operator/concatMapTo.ts","../rxjs/src/operator/count.ts","../rxjs/src/add/operator/count.ts","../rxjs/src/operator/dematerialize.ts","../rxjs/src/add/operator/dematerialize.ts","../rxjs/src/operator/debounce.ts","../rxjs/src/add/operator/debounce.ts","../rxjs/src/operator/debounceTime.ts","../rxjs/src/add/operator/debounceTime.ts","../rxjs/src/operator/defaultIfEmpty.ts","../rxjs/src/add/operator/defaultIfEmpty.ts","../rxjs/src/operator/delay.ts","../rxjs/src/add/operator/delay.ts","../rxjs/src/operator/delayWhen.ts","../rxjs/src/add/operator/delayWhen.ts","../rxjs/src/add/operator/distinct.ts","../rxjs/src/operator/distinct.ts","../rxjs/src/operator/distinctKey.ts","../rxjs/src/add/operator/distinctKey.ts","../rxjs/src/add/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilKeyChanged.ts","../rxjs/src/add/operator/distinctUntilKeyChanged.ts","../rxjs/src/operator/do.ts","../rxjs/src/add/operator/do.ts","../rxjs/src/operator/exhaust.ts","../rxjs/src/add/operator/exhaust.ts","../rxjs/src/operator/exhaustMap.ts","../rxjs/src/add/operator/exhaustMap.ts","../rxjs/src/operator/expand.ts","../rxjs/src/add/operator/expand.ts","../rxjs/src/operator/elementAt.ts","../rxjs/src/add/operator/elementAt.ts","../rxjs/src/add/operator/filter.ts","../rxjs/src/operator/finally.ts","../rxjs/src/add/operator/finally.ts","../rxjs/src/add/operator/find.ts","../rxjs/src/operator/find.ts","../rxjs/src/operator/findIndex.ts","../rxjs/src/add/operator/findIndex.ts","../rxjs/src/operator/first.ts","../rxjs/src/add/operator/first.ts","../rxjs/src/util/MapPolyfill.ts","../rxjs/src/util/Map.ts","../rxjs/src/util/FastMap.ts","../rxjs/src/operator/groupBy.ts","../rxjs/src/add/operator/groupBy.ts","../rxjs/src/util/noop.ts","../rxjs/src/operator/ignoreElements.ts","../rxjs/src/add/operator/ignoreElements.ts","../rxjs/src/operator/isEmpty.ts","../rxjs/src/add/operator/isEmpty.ts","../rxjs/src/operator/audit.ts","../rxjs/src/add/operator/audit.ts","../rxjs/src/operator/auditTime.ts","../rxjs/src/add/operator/auditTime.ts","../rxjs/src/operator/last.ts","../rxjs/src/add/operator/last.ts","../rxjs/src/operator/let.ts","../rxjs/src/add/operator/let.ts","../rxjs/src/operator/every.ts","../rxjs/src/add/operator/every.ts","../rxjs/src/add/operator/map.ts","../rxjs/src/operator/mapTo.ts","../rxjs/src/add/operator/mapTo.ts","../rxjs/src/operator/materialize.ts","../rxjs/src/add/operator/materialize.ts","../rxjs/src/operator/max.ts","../rxjs/src/add/operator/max.ts","../rxjs/src/operator/merge.ts","../rxjs/src/add/operator/merge.ts","../rxjs/src/add/operator/mergeAll.ts","../rxjs/src/operator/mergeMap.ts","../rxjs/src/add/operator/mergeMap.ts","../rxjs/src/operator/mergeMapTo.ts","../rxjs/src/add/operator/mergeMapTo.ts","../rxjs/src/operator/mergeScan.ts","../rxjs/src/add/operator/mergeScan.ts","../rxjs/src/operator/min.ts","../rxjs/src/add/operator/min.ts","../rxjs/src/add/operator/multicast.ts","../rxjs/src/add/operator/observeOn.ts","../rxjs/src/observable/PromiseObservable.ts","../rxjs/src/observable/IteratorObservable.ts","../rxjs/src/observable/ArrayLikeObservable.ts","../rxjs/src/observable/FromObservable.ts","../rxjs/src/operator/onErrorResumeNext.ts","../rxjs/src/add/operator/onErrorResumeNext.ts","../rxjs/src/operator/pairwise.ts","../rxjs/src/add/operator/pairwise.ts","../rxjs/src/util/not.ts","../rxjs/src/operator/filter.ts","../rxjs/src/operator/partition.ts","../rxjs/src/add/operator/partition.ts","../rxjs/src/operator/pluck.ts","../rxjs/src/add/operator/pluck.ts","../rxjs/src/operator/publish.ts","../rxjs/src/add/operator/publish.ts","../rxjs/src/operator/publishBehavior.ts","../rxjs/src/add/operator/publishBehavior.ts","../rxjs/src/operator/publishReplay.ts","../rxjs/src/add/operator/publishReplay.ts","../rxjs/src/operator/publishLast.ts","../rxjs/src/add/operator/publishLast.ts","../rxjs/src/operator/race.ts","../rxjs/src/add/operator/race.ts","../rxjs/src/operator/reduce.ts","../rxjs/src/add/operator/reduce.ts","../rxjs/src/operator/repeat.ts","../rxjs/src/add/operator/repeat.ts","../rxjs/src/operator/repeatWhen.ts","../rxjs/src/add/operator/repeatWhen.ts","../rxjs/src/operator/retry.ts","../rxjs/src/add/operator/retry.ts","../rxjs/src/operator/retryWhen.ts","../rxjs/src/add/operator/retryWhen.ts","../rxjs/src/operator/sample.ts","../rxjs/src/add/operator/sample.ts","../rxjs/src/operator/sampleTime.ts","../rxjs/src/add/operator/sampleTime.ts","../rxjs/src/operator/scan.ts","../rxjs/src/add/operator/scan.ts","../rxjs/src/operator/sequenceEqual.ts","../rxjs/src/add/operator/sequenceEqual.ts","../rxjs/src/operator/multicast.ts","../rxjs/src/operator/share.ts","../rxjs/src/add/operator/share.ts","../rxjs/src/operator/single.ts","../rxjs/src/add/operator/single.ts","../rxjs/src/operator/skip.ts","../rxjs/src/add/operator/skip.ts","../rxjs/src/operator/skipUntil.ts","../rxjs/src/add/operator/skipUntil.ts","../rxjs/src/operator/skipWhile.ts","../rxjs/src/add/operator/skipWhile.ts","../rxjs/src/operator/mergeAll.ts","../rxjs/src/operator/concat.ts","../rxjs/src/operator/startWith.ts","../rxjs/src/add/operator/startWith.ts","../rxjs/src/util/isNumeric.ts","../rxjs/src/observable/SubscribeOnObservable.ts","../rxjs/src/operator/subscribeOn.ts","../rxjs/src/add/operator/subscribeOn.ts","../rxjs/src/operator/switch.ts","../rxjs/src/add/operator/switch.ts","../rxjs/src/operator/switchMap.ts","../rxjs/src/add/operator/switchMap.ts","../rxjs/src/operator/switchMapTo.ts","../rxjs/src/add/operator/switchMapTo.ts","../rxjs/src/operator/take.ts","../rxjs/src/add/operator/take.ts","../rxjs/src/operator/takeLast.ts","../rxjs/src/add/operator/takeLast.ts","../rxjs/src/operator/takeUntil.ts","../rxjs/src/add/operator/takeUntil.ts","../rxjs/src/operator/takeWhile.ts","../rxjs/src/add/operator/takeWhile.ts","../rxjs/src/operator/throttle.ts","../rxjs/src/add/operator/throttle.ts","../rxjs/src/operator/throttleTime.ts","../rxjs/src/add/operator/throttleTime.ts","../rxjs/src/add/operator/timeInterval.ts","../rxjs/src/operator/timeout.ts","../rxjs/src/add/operator/timeout.ts","../rxjs/src/util/isDate.ts","../rxjs/src/operator/timeoutWith.ts","../rxjs/src/add/operator/timeoutWith.ts","../rxjs/src/add/operator/timestamp.ts","../rxjs/src/operator/toArray.ts","../rxjs/src/add/operator/toArray.ts","../rxjs/src/operator/toPromise.ts","../rxjs/src/add/operator/toPromise.ts","../rxjs/src/operator/window.ts","../rxjs/src/add/operator/window.ts","../rxjs/src/operator/windowCount.ts","../rxjs/src/add/operator/windowCount.ts","../rxjs/src/operator/windowTime.ts","../rxjs/src/add/operator/windowTime.ts","../rxjs/src/operator/windowToggle.ts","../rxjs/src/add/operator/windowToggle.ts","../rxjs/src/operator/windowWhen.ts","../rxjs/src/add/operator/windowWhen.ts","../rxjs/src/operator/withLatestFrom.ts","../rxjs/src/add/operator/withLatestFrom.ts","../rxjs/src/add/operator/zip.ts","../rxjs/src/observable/ScalarObservable.ts","../rxjs/src/observable/EmptyObservable.ts","../rxjs/src/util/isScheduler.ts","../rxjs/src/observable/ArrayObservable.ts","../rxjs/src/OuterSubscriber.ts","../rxjs/src/util/isPromise.ts","../rxjs/src/InnerSubscriber.ts","../rxjs/src/util/subscribeToResult.ts","../rxjs/src/operator/zip.ts","../rxjs/src/operator/zipAll.ts","../rxjs/src/add/operator/zipAll.ts","../rxjs/src/AsyncSubject.ts","../rxjs/src/operator/observeOn.ts","../rxjs/src/ReplaySubject.ts","../rxjs/src/BehaviorSubject.ts","../rxjs/src/observable/MulticastObservable.ts","../rxjs/src/observable/ConnectableObservable.ts","../rxjs/src/util/EmptyError.ts","../rxjs/src/util/ArgumentOutOfRangeError.ts","../rxjs/src/operator/timeInterval.ts","../rxjs/src/operator/timestamp.ts","../rxjs/src/Notification.ts","../rxjs/src/testing/ColdObservable.ts","../rxjs/src/util/ObjectUnsubscribedError.ts","../rxjs/src/SubjectSubscription.ts","../rxjs/src/Subject.ts","../rxjs/src/testing/SubscriptionLoggable.ts","../rxjs/src/util/applyMixins.ts","../rxjs/src/testing/HotObservable.ts","../rxjs/src/testing/SubscriptionLog.ts","../rxjs/src/testing/TestScheduler.ts","../rxjs/src/scheduler/VirtualTimeScheduler.ts","../rxjs/src/util/toSubscriber.ts","../rxjs/src/Observable.ts","../rxjs/src/Observer.ts","../rxjs/src/Subscriber.ts","../rxjs/src/operator/map.ts","../rxjs/src/observable/dom/AjaxObservable.ts","../rxjs/src/util/Immediate.ts","../rxjs/src/scheduler/AsapAction.ts","../rxjs/src/scheduler/AsapScheduler.ts","../rxjs/src/scheduler/asap.ts","../rxjs/src/scheduler/async.ts","../rxjs/src/scheduler/QueueAction.ts","../rxjs/src/scheduler/QueueScheduler.ts","../rxjs/src/scheduler/queue.ts","../rxjs/src/util/isArray.ts","../rxjs/src/util/isObject.ts","../rxjs/src/util/isFunction.ts","../rxjs/src/util/tryCatch.ts","../rxjs/src/util/errorObject.ts","../rxjs/src/util/UnsubscriptionError.ts","../rxjs/src/Subscription.ts","../rxjs/src/scheduler/Action.ts","../rxjs/src/scheduler/AsyncAction.ts","../rxjs/src/util/AnimationFrame.ts","../rxjs/src/scheduler/AnimationFrameAction.ts","../rxjs/src/Scheduler.ts","../rxjs/src/scheduler/AsyncScheduler.ts","../rxjs/src/scheduler/AnimationFrameScheduler.ts","../rxjs/src/scheduler/animationFrame.ts","../rxjs/src/symbol/rxSubscriber.ts","../rxjs/src/symbol/iterator.ts","../rxjs/src/util/root.ts","../rxjs/src/symbol/observable.ts","../rxjs/src/Rx.ts"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","scheduler","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","result","concat","subscribe","state","self","result_2","add","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","concatStatic","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","FromObservable_1","from","FromObservable","from_1","isNodeStyleEventEmmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","mergeStatic","race_1","race","raceStatic","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","Object","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","ErrorObservable_1","_throw","throw_1","throw","isDate_1","TimerObservable","dueTime","Number","isDate","now","initialDelay","action","TimerObservable_1","timer","timer_1","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","root_1","root","assign","TypeError","output","hasOwnProperty","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","socket","protocol","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","BufferOperator","BufferSubscriber","_next","push","buffer_1","bufferCount","bufferSize","startBufferEvery","BufferCountOperator","BufferCountSubscriber","buffers","remove","splice","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","context","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","spliceIndex","indexOf","bufferTime_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","cache","windowTime","outerSub","refs","getSubject","s","cache_1","_catch","CatchOperator","caught","CatchSubscriber","isStopped","catch_1","catch","combineAll","combineAll_1","unshift","none","CombineLatestSubscriber","active","observable","toRespond","unused","oldVal","_tryProject","slice","concatAll","mergeAll_1","MergeAllOperator","concatAll_1","concatMap","mergeMap_1","MergeMapOperator","concatMap_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","concatMapTo_1","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","observe","dematerialize_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","hasValue","durationSubscription","_tryNext","emitValue","duration","debounce_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","delay","absoluteDelay","delayFor","Math","abs","DelayOperator","Notification_1","DelaySubscriber","errored","time","notification","delay_1","max","_schedule","scheduleNotification","message","DelayMessage","Notification","createNext","createComplete","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","delayWhen_1","distinct_1","distinct","compare","flushes","DistinctOperator","DistinctSubscriber","found","y","distinctKey","distinctKey_1","distinctUntilChanged_1","distinctUntilChanged","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","Boolean","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","do_1","do","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","exhaust_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","expand","concurrent","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","elementAt","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","elementAt_1","filter_1","filter","_finally","callback","FinallyOperator","FinallySubscriber","finally_1","finally","find_1","find","thisArg","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","findIndex_1","first","FirstOperator","EmptyError_1","FirstSubscriber","_emit","_tryResultSelector","_emitFinal","EmptyError","first_1","MapPolyfill","size","_values","_keys","get","set","delete","clear","forEach","cb","MapPolyfill_1","Map","FastMap","groupBy","elementSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","auditTime_1","last","LastOperator","LastSubscriber","last_1","letProto","let_1","let","letBind","every","EveryOperator","EverySubscriber","everyValueMatch","every_1","map_1","map","mapTo","MapToOperator","MapToSubscriber","mapTo_1","materialize","MaterializeOperator","MaterializeSubscriber","createError","materialize_1","comparer","reduce_1","ReduceOperator","max_1","mergeAll","mergeMap","MergeMapSubscriber","_innerSub","ish","_notifyResultSelector","flatMap","mergeMapTo","MergeMapToSubscriber","flatMapTo","mergeScan","seed","MergeScanOperator","MergeScanSubscriber","acc","mergeScan_1","min","min_1","multicast_1","multicast","observeOn_1","observeOn","promise","_isScalar","then","setTimeout","getIterator","iterator_1","$$iterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","iterator","hasError","done","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isArrayLike","$$observable","isPromise","ObserveOnSubscriber","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","pairwise_1","not","pred","notPred","FilterOperator","FilterSubscriber","partition","not_1","partition_1","pluck","properties","plucker","props","mapper","currentProp","p","pluck_1","publish","publish_1","publishBehavior","BehaviorSubject_1","BehaviorSubject","publishBehavior_1","publishReplay","publishReplay_1","publishLast","publishLast_1","RaceOperator","RaceSubscriber","hasFirst","subscriptions","reduce","accumulator","ReduceSubscriber","hasSeed","_tryReduce","repeat","RepeatOperator","RepeatSubscriber","repeat_1","repeatWhen","notifier","RepeatWhenOperator","RepeatWhenSubscriber","notifications","retries","retriesSubscription","repeatWhen_1","retry","RetryOperator","RetrySubscriber","retry_1","retryWhen","RetryWhenOperator","RetryWhenSubscriber","errors","retryWhen_1","sample","SampleOperator","SampleSubscriber","sample_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","sampleTime_1","scan","ScanOperator","ScanSubscriber","accumulatorSet","defineProperty","_seed","scan_1","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","b","areEqual","nextB","sequenceEqual_1","subjectOrSubjectFactory","subjectFactory","MulticastObservable_1","MulticastObservable","ConnectableObservable_1","ConnectableObservable","shareSubjectFactory","share","refCount","share_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","skip","SkipOperator","SkipSubscriber","skip_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","MergeAllSubscriber","startWith","array","startWith_1","val","parseFloat","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnObservable_1","subscribeOn_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switch_1","switch","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","take","TakeOperator","TakeSubscriber","take_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeLast_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","timeInterval_1","timeInterval","timeout","due","errorToSend","absoluteTimeout","waitFor","TimeoutOperator","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","timeout_1","Date","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","timeoutWith_1","timestamp_1","timestamp","toArray","ToArrayOperator","ToArraySubscriber","toArray_1","toPromise","PromiseCtor","Rx","config","Promise","resolve","reject","toPromise_1","window","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","windowTimeSpan","windowCreationInterval","WindowTimeOperator","dispatchWindowTimeSpanOnly","dispatchWindowCreation","timeSpanState","dispatchWindowClose","closeWindow","WindowTimeSubscriber","window_2","window_3","window_4","windowTime_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowWhen","unsubscribeClosingNotification","closingNotification","windowWhen_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","withLatestFrom_1","zipProto","InnerSubscriber","outerSubscriber","InnerSubscriber_1","item","obs","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","zipAll","zipAll_1","hasNext","EMPTY","thrownError","ObserveOnOperator","scheduleMessage","ObserveOnMessage","queue_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","ObjectUnsubscribedError_1","_value","getValue","ObjectUnsubscribedError","connectable","connect","_refCount","_subject","connection","_connection","ConnectableSubscriber","RefCountOperator","SubjectSubscriber","refCounter","RefCountSubscriber","sharedConnection","name","stack","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimestampOperator","Timestamp","TimestampSubscriber","kind","exception","accept","toObservable","undefinedValueNotification","completeNotification","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","frame","applyMixins","SubscriptionLoggable","SubjectSubscription","subscriberIndex","SubjectSubscription_1","rxSubscriber_1","$$rxSubscriber","copy","asObservable","SubscriptionLog_1","SubscriptionLog","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","actions","execute","AsyncScheduler","work","id","requestAsyncId","sort","sortActions","recycleAsyncId","AsyncAction","toSubscriber","toSubscriber_1","observerOrNext","sink","Observer_1","destinationOrNext","SafeSubscriber","_parent","bind","_context","__tryOrSetError","__tryOrUnsub","fn","MapOperator","MapSubscriber","getCORSRequest","XMLHttpRequest","xhr","withCredentials","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxGetJSON","responseType","response","urlOrRequest","request","createXHR","crossDomain","prop","AjaxSubscriber","post","put","getJSON","FormData","serializeBody","AjaxResponse","user","password","open","setHeaders","setupEvents","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","progressSubscriber","ontimeout","xhrTimeout","AjaxTimeoutError","upload","onprogress","xhrProgress","xhrError","AjaxError","onreadystatechange","xhrReadyStateChange","status_1","status","responseText","abort","originalEvent","responseXML","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","QueueAction","_execute","QueueScheduler","QueueAction_1","QueueScheduler_1","isObject","tryCatcher","tryCatchTarget","UnsubscriptionError","isObject_1","UnsubscriptionError_1","hasErrors","_subscriptions","trial","sub","teardown","subscriptionIndex","Action","Action_1","pending","setInterval","clearInterval","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrame","AnimationFrame_1","AnimationFrameAction","Scheduler","Scheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","Symbol","for","Set","objectTypes","boolean","function","object","number","string","freeGlobal","global","getSymbolObservable","TestScheduler_1","animationFrame_1","rxSubscriber"],"mappings":"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","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T> }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result. The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              public scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber });\n    }\n  }\n}\n\nfunction dispatch<T>(state: { source: BoundNodeCallbackObservable<T>, subscriber: Subscriber<T> }) {\n  const self = (<Subscription> this);\n  const { source, subscriber } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  Scheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: Scheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: Scheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | Scheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | Scheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | Scheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    Scheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: Scheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <Scheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport type NodeStyleEventEmmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmmitter(sourceObj: any): sourceObj is NodeStyleEventEmmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T, R> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @parm {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T, R> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *  \n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *  \n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function): void} removeHandler A function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler: (handler: Function) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler: (handler: Function) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    this._callAddHandler(handler, subscriber);\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler);\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): void {\n    try {\n      this.addHandler(handler);\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Inital state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * Scheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: Scheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: Scheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: Scheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: Scheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | Scheduler,\n                      scheduler?: Scheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <Scheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <Scheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { GenerateObservable } from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified Scheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` Scheduler to provide a notion of time, but you may pass any\n   * Scheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: Scheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: Scheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { raceStatic } from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNextStatic } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  (<any> this).schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional Scheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional Scheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: Scheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: Scheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * Scheduler and just delivers the notifications synchronously, but may use\n   * an optional Scheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: Scheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: Scheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: Scheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: any, scheduler?: Scheduler) {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` Scheduler to provide a notion of time, but you\n   * may pass any Scheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | Scheduler,\n                scheduler?: Scheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: Scheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | Scheduler,\n              scheduler?: Scheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <Scheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nconst Object = root.Object;\n\nif (typeof (<any>Object).assign != 'function') {\n  (function () {\n    (<any>Object).assign = function assignPolyfill(target: Object, ...sources: Array<Object>): Object {\n      if (target === undefined || target === null) {\n        throw new TypeError('cannot convert undefined or null to object');\n      }\n\n      const output = Object(target);\n      const len = sources.length;\n      for (let index = 0; index < len; index++) {\n        let source = sources[index];\n        if (source !== undefined && source !== null) {\n          for (let key in source) {\n            if (source.hasOwnProperty(key)) {\n              output[key] = source[key];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  })();\n}\n\nexport const assign: (target: Object, ...sources: Array<Object>) => Object = Object.assign;","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * @param urlConfigOrSource\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => observer.error(e);\n\n    socket.onclose = (e: CloseEvent) => {\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0 && socket && socket.readyState === 1) {\n        socket.close();\n        this.socket = null;\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this.socket = null;\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nexport interface BufferSignature<T> {\n  (closingNotifier: Observable<any>): Observable<T[]>;\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer, BufferSignature } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: BufferSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nexport interface BufferCountSignature<T> {\n  (bufferSize: number, startBufferEvery?: number): Observable<T[]>;\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [[]];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = (this.count += 1);\n    const destination = this.destination;\n    const bufferSize = this.bufferSize;\n    const startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n    const buffers = this.buffers;\n    const len = buffers.length;\n    let remove = -1;\n\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = 0; i < len; i++) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        remove = i;\n        destination.next(buffer);\n      }\n    }\n\n    if (remove !== -1) {\n      buffers.splice(remove, 1);\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount, BufferCountSignature } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: BufferCountSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: Scheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nexport interface BufferTimeSignature<T> {\n  (bufferTimeSpan: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: Scheduler): Observable<T[]>;\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: Scheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = (<any>this).schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime, BufferTimeSignature } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: BufferTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface BufferToggleSignature<T> {\n  <O>(openings: SubscribableOrPromise<O>, closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]>;\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { bufferToggle, BufferToggleSignature } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: BufferToggleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nexport interface BufferWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<T[]>;\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen, BufferWhenSignature } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: BufferWhenSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {Observable<any>}\n * @method cache\n * @owner Observable\n */\nexport function cache<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                         windowTime: number = Number.POSITIVE_INFINITY,\n                         scheduler?: Scheduler): Observable<T> {\n  let subject: ReplaySubject<T>;\n  let source = this;\n  let refs = 0;\n  let outerSub: Subscription;\n\n  const getSubject = () => {\n    subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n    return subject;\n  };\n\n  return new Observable<T>((observer: Observer<T>) => {\n    if (!subject) {\n      subject = getSubject();\n      outerSub = source.subscribe(\n        (value: T) => subject.next(value),\n        (err: any) => {\n          let s = subject;\n          subject = null;\n          s.error(err);\n        },\n        () => subject.complete()\n      );\n    }\n\n    refs++;\n\n    if (!subject) {\n      subject = getSubject();\n    }\n    let innerSub = subject.subscribe(observer);\n\n    return () => {\n      refs--;\n      if (innerSub) {\n        innerSub.unsubscribe();\n      }\n      if (refs === 0) {\n        outerSub.unsubscribe();\n      }\n    };\n  });\n}\n\nexport interface CacheSignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { cache, CacheSignature } from '../../operator/cache';\n\nObservable.prototype.cache = cache;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    cache: CacheSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @owner Observable\n */\nexport function _catch<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nexport interface CatchSignature<T> {\n  <R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R>;\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.unsubscribe();\n      (<any>this.destination).remove(this);\n      subscribeToResult(this, result);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch, CatchSignature } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: CatchSignature<T>;\n    _catch: CatchSignature<T>;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n\nexport interface CombineAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll, CombineAllSignature } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: CombineAllSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <any>observables[0];\n  }\n\n  observables.unshift(this);\n\n  return new ArrayObservable(observables).lift(new CombineLatestOperator(project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface CombineLatestSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<T>[]): Observable<Array<T>>;\n  <TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest, CombineLatestSignature } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: CombineLatestSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat, ConcatSignature } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: ConcatSignature<T>;\n  }\n}","import { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): T {\n  return this.lift(new MergeAllOperator<T>(1));\n}\n\nexport interface ConcatAllSignature<T> {\n  (): T;\n  <R>(): Subscribable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll, ConcatAllSignature } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: ConcatAllSignature<T>;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n\nexport interface ConcatMapSignature<T> {\n  <R>(project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap, ConcatMapSignature } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: ConcatMapSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n\nexport interface ConcatMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo, ConcatMapToSignature } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: ConcatMapToSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting an value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nexport interface CountSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number>;\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count, CountSignature } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: CountSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nexport interface DematerializeSignature<T> {\n  <R>(): Observable<R>;\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source._subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize, DematerializeSignature } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: DematerializeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nexport interface DebounceSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce, DebounceSignature } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: DebounceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link Scheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nexport interface DebounceTimeSignature<T> {\n  (dueTime: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime, DebounceTimeSignature } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: DebounceTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nexport interface DefaultIfEmptySignature<T> {\n  (defaultValue?: T): Observable<T>;\n  <R>(defaultValue?: R): Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty, DefaultIfEmptySignature } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: DefaultIfEmptySignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The Scheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: Scheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nexport interface DelaySignature<T> {\n  (delay: number | Date, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: Scheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay, DelaySignature } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: DelaySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nexport interface DelayWhenSignature<T> {\n  (delayDurationSelector: (value: T) => Observable<any>, subscriptionDelay?: Observable<any>): Observable<T>;\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen, DelayWhenSignature } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: DelayWhenSignature<T>;\n  }\n}","import { Observable } from '../../Observable';\nimport { distinct, DistinctSignature } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: DistinctSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T>(compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(compare, flushes));\n}\n\nexport interface DistinctSignature<T> {\n  (compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n\nclass DistinctOperator<T> implements Operator<T, T> {\n  constructor(private compare: (x: T, y: T) => boolean, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T> extends OuterSubscriber<T, T> {\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>, compare: (x: T, y: T) => boolean, flushes: Observable<any>) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.length = 0;\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    let found = false;\n    const values = this.values;\n    const len = values.length;\n    try {\n      for (let i = 0; i < len; i++) {\n        if (this.compare(values[i], value)) {\n          found = true;\n          return;\n        }\n      }\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.values.push(value);\n    this.destination.next(value);\n  }\n\n  private compare(x: T, y: T): boolean {\n    return x === y;\n  }\n}\n","import { distinct } from './distinct';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctKey\n * @owner Observable\n */\nexport function distinctKey<T>(key: string, compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return distinct.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  }, flushes);\n}\n\nexport interface DistinctKeySignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { distinctKey, DistinctKeySignature } from '../../operator/distinctKey';\n\nObservable.prototype.distinctKey = distinctKey;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctKey: DistinctKeySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged, DistinctUntilChangedSignature } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: DistinctUntilChangedSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nexport interface DistinctUntilChangedSignature<T> {\n (compare?: (x: T, y: T) => boolean): Observable<T>;\n <K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n\nexport interface DistinctUntilKeyChangedSignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged, DistinctUntilKeyChangedSignature } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: DistinctUntilKeyChangedSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nexport interface DoSignature<T> {\n  (next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\n  (observer: PartialObserver<T>): Observable<T>;\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do, DoSignature } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: DoSignature<T>;\n    _do: DoSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nexport interface SwitchFirstSignature<T> {\n  (): T;\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust, SwitchFirstSignature } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: SwitchFirstSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nexport interface SwitchFirstMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap, SwitchFirstMapSignature } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: SwitchFirstMapSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: Scheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport interface ExpandSignature<T> {\n  (project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: Scheduler): Observable<R>;\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand, ExpandSignature } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: ExpandSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nexport interface ElementAtSignature<T> {\n  (index: number, defaultValue?: T): Observable<T>;\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt, ElementAtSignature } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: ElementAtSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter, FilterSignature } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: FilterSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nexport interface FinallySignature<T> {\n  (callback: () => void): Observable<T>;\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally, FinallySignature } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: FinallySignature<T>;\n    _finally: FinallySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find, FindSignature } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: FindSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return this.lift(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport interface FindSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<T>;\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return this.lift(new FindValueOperator(predicate, this, true, thisArg));\n}\n\nexport interface FindIndexSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<number>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex, FindIndexSignature } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: FindIndexSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface FirstSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    destination.next(value);\n    destination.complete();\n    this.hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first, FirstSignature } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: FirstSignature<T>;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: (value: T) => R,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n}\n\n/* tslint:disable:max-line-length */\nexport interface GroupBySignature<T> {\n  <K>(keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\n  <K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\n  <K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\n}\n/* tslint:enable:max-line-length */\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(public source: Observable<T>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source._subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      groups.set(key, group = new Subject<R>());\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed && !this.attemptedToUnsubscribe) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy, GroupBySignature } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: GroupBySignature<T>;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nexport interface IgnoreElementsSignature<T> {\n  (): Observable<T>;\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements, IgnoreElementsSignature } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: IgnoreElementsSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty(): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nexport interface IsEmptySignature<T> {\n  (): Observable<boolean>;\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty, IsEmptySignature } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: IsEmptySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nexport interface AuditSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T>;\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit, AuditSignature } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: AuditSignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nexport interface AuditTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime, AuditTimeSignature } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: AuditTimeSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface LastSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last, LastSignature } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: LastSignature<T>;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n\nexport interface LetSignature<T> {\n  <R>(func: (selector: Observable<T>) => Observable<R>): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto, LetSignature } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: LetSignature<T>;\n    letBind: LetSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nexport interface EverySignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<boolean>;\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every, EverySignature } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: EverySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map, MapSignature } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: MapSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nexport interface MapToSignature<T> {\n  <R>(value: R): Observable<R>;\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo, MapToSignature } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: MapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nexport interface MaterializeSignature<T> {\n  (): Observable<Notification<T>>;\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source._subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize, MaterializeSignature } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: MaterializeSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the largest number.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest number.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n\nexport interface MaxSignature<T> {\n  (comparer?: (x: T, y: T) => number): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { max, MaxSignature } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: MaxSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n  observables.unshift(this);\n  return mergeStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface MergeSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  (concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler | number>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | Scheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | Scheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: Scheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <Scheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge, MergeSignature } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: MergeSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll, MergeAllSignature } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: MergeAllSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source._subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap, MergeMapSignature } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: MergeMapSignature<T>;\n    mergeMap: MergeMapSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapToSignature<T> {\n  <R>(observable: ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo, MergeMapToSignature } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: MergeMapToSignature<T>;\n    mergeMapTo: MergeMapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(project: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(project, seed, concurrent));\n}\n\nexport interface MergeScanSignature<T> {\n  <R>(project: (acc: R, value: T) => Observable<R>, seed: R, concurrent?: number): Observable<R>;\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeScanSubscriber(\n      subscriber, this.project, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.project)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan, MergeScanSignature } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: MergeScanSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n\nexport interface MinSignature<T> {\n  (comparer?: (x: T, y: T) => number): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { min, MinSignature } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: MinSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast, MulticastSignature } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: MulticastSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn, ObserveOnSignature } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: ObserveOnSignature<T>;\n  }\n}","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: Scheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: Scheduler) {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: Scheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: Scheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { Scheduler } from '../Scheduler';\nimport { $$iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { $$observable } from '../symbol/observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: Scheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: Scheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *  \n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *  \n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\r\nimport { FromObservable } from '../observable/FromObservable';\r\nimport { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { isArray } from '../util/isArray';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { InnerSubscriber } from '../InnerSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\n\r\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                       Array<ObservableInput<any>> |\r\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<Observable<any>>>nextSources[0];\r\n  }\r\n\r\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\n/* tslint:disable:max-line-length */\r\nexport interface OnErrorResumeNextSignature<T> {\r\n  <R>(v: ObservableInput<R>): Observable<R>;\r\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\n  <R>(array: ObservableInput<any>[]): Observable<R>;\r\n}\r\n/* tslint:enable:max-line-length */\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\r\n/* tslint:enable:max-line-length */\r\n\r\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                              Array<ObservableInput<any>> |\r\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\r\n  let source: ObservableInput<any> = null;\r\n\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\r\n  }\r\n  source = nextSources.shift();\r\n\r\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\r\n  constructor(private nextSources: Array<ObservableInput<any>>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\r\n  }\r\n}\r\n\r\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\r\n  constructor(protected destination: Subscriber<T>,\r\n              private nextSources: Array<ObservableInput<any>>) {\r\n    super(destination);\r\n  }\r\n\r\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  private subscribeToNextSource(): void {\r\n    const next = this.nextSources.shift();\r\n    if (next) {\r\n      this.add(subscribeToResult(this, next));\r\n    } else {\r\n      this.destination.complete();\r\n    }\r\n  }\r\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext, OnErrorResumeNextSignature } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: OnErrorResumeNextSignature<T>;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nexport interface PairwiseSignature<T> {\n  (): Observable<[T, T]>;\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source._subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise, PairwiseSignature } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: PairwiseSignature<T>;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctKey}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nexport interface FilterSignature<T> {\n  (predicate: (value: T, index: number) => boolean, thisArg?: any): Observable<T>;\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n\nexport interface PartitionSignature<T> {\n  (predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition, PartitionSignature } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: PartitionSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<R>(...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nexport interface PluckSignature<T> {\n  <R>(...properties: string[]): Observable<R>;\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck, PluckSignature } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: PluckSignature<T>;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface PublishSignature<T> {\n  (): ConnectableObservable<T>;\n  (selector: selector<T>): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publish, PublishSignature } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: PublishSignature<T>;\n  }\n}","import { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n\nexport interface PublishBehaviorSignature<T> {\n  (value: T): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior, PublishBehaviorSignature } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: PublishBehaviorSignature<T>;\n  }\n}","import { ReplaySubject } from '../ReplaySubject';\nimport { Scheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: Scheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n\nexport interface PublishReplaySignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay, PublishReplaySignature } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: PublishReplaySignature<T>;\n  }\n}","import { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n\nexport interface PublishLastSignature<T> {\n  (): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast, PublishLastSignature } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: PublishLastSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  observables.unshift(this);\n  return raceStatic.apply(this, observables);\n}\n\nexport interface RaceSignature<T> {\n  (...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\n  <R>(...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n          this.add(subscription);\n        }\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race, RaceSignature } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: RaceSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T) => R, seed?: R): Observable<R> {\n  return this.lift(new ReduceOperator(accumulator, seed));\n}\n\nexport interface ReduceSignature<T> {\n  (accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\n  (accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\n  <R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n\n  constructor(private accumulator: (acc: R, value: T) => R, private seed?: R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n\n  acc: T | R;\n  hasSeed: boolean;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => R,\n              seed?: R) {\n    super(destination);\n    this.acc = seed;\n    this.accumulator = accumulator;\n    this.hasSeed = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce, ReduceSignature } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: ReduceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular Scheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nexport interface RepeatSignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat, RepeatSignature } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: RepeatSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.\n * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier, this));\n}\n\nexport interface RepeatWhenSignature<T> {\n  (notifier: (notifications: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  complete() {\n    if (!this.isStopped) {\n\n      let notifications = this.notifications;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        notifications = new Subject();\n        retries = tryCatch(this.notifier)(notifications);\n        if (retries === errorObject) {\n          return super.complete();\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.notifications = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.notifications = notifications;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen, RepeatWhenSignature } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: RepeatWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nexport interface RetrySignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry, RetrySignature } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: RetrySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nexport interface RetryWhenSignature<T> {\n  (notifier: (errors: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen, RetryWhenSignature } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: RetryWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nexport interface SampleSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<any>, notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample, SampleSignature } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: SampleSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nexport interface SampleTimeSignature<T> {\n  (period: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  (<any>this).schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime, SampleTimeSignature } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: SampleTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  return this.lift(new ScanOperator(accumulator, seed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private accumulatorSet: boolean = false;\n  private _seed: T | R;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.accumulatorSet = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, seed?: T | R) {\n    super(destination);\n    this.seed = seed;\n    this.accumulatorSet = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T): void {\n    if (!this.accumulatorSet) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ReduceSignature } from '../../operator/reduce';\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: ReduceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nexport interface SequenceEqualSignature<T> {\n  (compareTo: Observable<T>, comparor?: (a: T, b: T) => boolean): Observable<boolean>;\n}\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo the observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, T> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual, SequenceEqualSignature } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: SequenceEqualSignature<T>;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { MulticastObservable } from '../observable/MulticastObservable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  return !selector ?\n    new ConnectableObservable(this, subjectFactory) :\n    new MulticastObservable(this, subjectFactory, selector);\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface MulticastSignature<T> {\n  (subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\n  (SubjectFactory: () => Subject<T>, selector?: selector<T>): Observable<T>;\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n\nexport interface ShareSignature<T> {\n  (): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { share, ShareSignature } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: ShareSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nexport interface SingleSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single, SingleSignature } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: SingleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nexport interface SkipSignature<T> {\n  (total: number): Observable<T>;\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip, SkipSignature } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: SkipSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nexport interface SkipUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil, SkipUntilSignature } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: SkipUntilSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nexport interface SkipWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile, SkipWhileSignature } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: SkipWhileSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): T {\n  return this.lift(new MergeAllOperator<T>(concurrent));\n}\n\nexport interface MergeAllSignature<T> {\n  (concurrent?: number): T;\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  return concatStatic<T, R>(this, ...observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ConcatSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | Scheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | Scheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  let scheduler: Scheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | Scheduler>): Observable<T> {\n  let scheduler = <Scheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n\nexport interface StartWithSignature<T> {\n  (v1: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: Scheduler): Observable<T>;\n  (...array: Array<T | Scheduler>): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith, StartWithSignature } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: StartWithSignature<T>;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: Scheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return source.subscribe(subscriber);\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: Scheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the Scheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return new SubscribeOnObservable<T>(this, delay, scheduler);\n}\n\nexport interface SubscribeOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}","\nimport { Observable } from '../../Observable';\nimport { subscribeOn, SubscribeOnSignature } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: SubscribeOnSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(): T {\n  return this.lift(new SwitchOperator());\n}\n\nexport interface SwitchSignature<T> {\n  (): T;\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch, SwitchSignature } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: SwitchSignature<T>;\n    _switch: SwitchSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nexport interface SwitchMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap, SwitchMapSignature } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: SwitchMapSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nexport interface SwitchMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo, SwitchMapToSignature } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: SwitchMapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nexport interface TakeSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    if (++this.count <= total) {\n      this.destination.next(value);\n      if (this.count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take, TakeSignature } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: TakeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nexport interface TakeLastSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast, TakeLastSignature } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: TakeLastSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nexport interface TakeUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil, TakeUntilSignature } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: TakeUntilSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nexport interface TakeWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile, TakeWhileSignature } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: TakeWhileSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nexport interface ThrottleSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle, ThrottleSignature } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: ThrottleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nexport interface ThrottleTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime, ThrottleTimeSignature } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: ThrottleTimeSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval, TimeIntervalSignature } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: TimeIntervalSignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * @param due\n * @param errorToSend\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           errorToSend: any = null,\n                           scheduler: Scheduler = async): Observable<T> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n}\n\nexport interface TimeoutSignature<T> {\n  (due: number | Date, errorToSend?: any, scheduler?: Scheduler): Observable<T>;\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout() {\n    this.error(this.errorToSend || new Error('timeout'));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout, TimeoutSignature } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: TimeoutSignature<T>;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: Scheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nexport interface TimeoutWithSignature<T> {\n  (due: number | Date, withObservable: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  <R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: Scheduler): Observable<T | R>;\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.closed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith, TimeoutWithSignature } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: TimeoutWithSignature<T>;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp, TimestampSignature } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: TimestampSignature<T>;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nexport interface ToArraySignature<T> {\n  (): Observable<T[]>;\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray, ToArraySignature } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: ToArraySignature<T>;\n  }\n}","import { root } from '../util/root';\n\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n\nexport interface ToPromiseSignature<T> {\n  (): Promise<T>;\n  (PromiseCtor: typeof Promise): Promise<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise, ToPromiseSignature } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: ToPromiseSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nexport interface WindowSignature<T> {\n  (windowBoundaries: Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source._subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window, WindowSignature } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: WindowSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nexport interface WindowCountSignature<T> {\n  (windowSize: number, startWindowEvery?: number): Observable<Observable<T>>;\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount, WindowCountSignature } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: WindowCountSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: Scheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nexport interface WindowTimeSignature<T> {\n  (windowTimeSpan: number, windowCreationInterval?: number, scheduler?: Scheduler): Observable<Observable<T>>;\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: Scheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      let window = this.openWindow();\n      const closeState = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      let window = this.openWindow();\n      const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T) {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  closeWindow(window: Subject<T>) {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\ninterface TimeSpanOnlyState<T> {\n  window: Subject<any>;\n  windowTimeSpan: number;\n  subscriber: WindowTimeSubscriber<T>;\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(state: TimeSpanOnlyState<T>) {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    window.complete();\n  }\n  state.window = subscriber.openWindow();\n  (<any>this).schedule(state, windowTimeSpan);\n}\n\ninterface Context<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface DispatchArg<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: Context<T>;\n}\n\nfunction dispatchWindowCreation<T>(state: CreationState<T>) {\n  let { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  let window = subscriber.openWindow();\n  let action = <Action<CreationState<T>>>this;\n  let context: Context<T> = { action, subscription: <any>null };\n  const timeSpanState: DispatchArg<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, window, context } = arg;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime, WindowTimeSignature } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: WindowTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface WindowToggleSignature<T> {\n  <O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle, WindowToggleSignature } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: WindowToggleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nexport interface WindowWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen, WindowWhenSignature } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: WindowWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface WithLatestFromSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<any>[]): Observable<R>;\n  <R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom, WithLatestFromSignature } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: WithLatestFromSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto, ZipSignature } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: ZipSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: Scheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: Scheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: Scheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler<T>(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: Scheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(...array: Array<T | Scheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` Scheduler, which means the `next`\n   * notifications are sent synchronously, although with a different Scheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | Scheduler>): Observable<T> {\n    let scheduler = <Scheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArray } from './isArray';\nimport { isPromise } from './isPromise';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { $$observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  }\n\n  if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (typeof result[$$iterator] === 'function') {\n    const iterator = <any>result[$$iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new Error('invalid observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    destination.error(new TypeError('unknown type returned'));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { $$iterator } from '../symbol/iterator';\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  observables.unshift(this);\n  return zipStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ZipSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: Array<ObservableInput<T>>): Observable<R>;\n  <TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private index = 0;\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    const index = this.index++;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>,\n              private index: number) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n\nexport interface ZipAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll, ZipAllSignature } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: ZipAllSignature<T>;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport interface ObserveOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: Scheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: Scheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n     this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch,\n                                      this.delay,\n                                      new ObserveOnMessage(notification, this.destination)));\n   }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Scheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\n\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: Scheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\nexport class MulticastObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>,\n              private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { selector, source } = this;\n    const connectable = new ConnectableObservable(source, this.subjectFactory);\n    const subscription = selector(connectable).subscribe(subscriber);\n    subscription.add(connectable.connect());\n    return subscription;\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source._subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(scheduler: Scheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport interface TimeIntervalSignature<T> {\n  (scheduler?: Scheduler): Observable<TimeInterval<T>>;\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: Scheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: Scheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Scheduler } from '../Scheduler';\r\nimport { async } from '../scheduler/async';\r\n\r\n/**\r\n * @param scheduler\r\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\r\n * @method timestamp\r\n * @owner Observable\r\n */\r\nexport function timestamp<T>(scheduler: Scheduler = async): Observable<Timestamp<T>> {\r\n  return this.lift(new TimestampOperator(scheduler));\r\n}\r\n\r\nexport interface TimestampSignature<T> {\r\n  (scheduler?: Scheduler): Observable<Timestamp<T>>;\r\n}\r\n\r\nexport class Timestamp<T> {\r\n  constructor(public value: T, public timestamp: number) {\r\n  }\r\n};\r\n\r\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\r\n  constructor(private scheduler: Scheduler) {\r\n  }\r\n\r\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\r\n    return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\r\n  }\r\n}\r\n\r\nclass TimestampSubscriber<T> extends Subscriber<T> {\r\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: Scheduler) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const now = this.scheduler.now();\r\n\r\n    this.destination.next(new Timestamp(value, now));\r\n  }\r\n}\r\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public exception?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.exception);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.exception);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.exception);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` exception.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  lift<T, R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { Subject } from '../Subject';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): Observable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): Subject<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return !this.id ?\n      super.schedule(state, delay) : (\n      // If an action is rescheduled, we save allocations by mutating its state,\n      // pushing it to the end of the scheduler queue, and recycling the action.\n      // But since the VirtualTimeScheduler is used for testing, VirtualActions\n      // must be immutable so they can be inspected later.\n      <VirtualAction<T>> this.add(\n        new VirtualAction<T>(this.scheduler, this.work))\n      ).schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { $$rxSubscriber } from '../symbol/rxSubscriber';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber();\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { $$observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | Promise<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this);\n    } else {\n      sink.add(this._subscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parent: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parent } = this;\n      if (!_parent.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parent, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._error) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parent.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parent.syncErrorValue = err;\n        _parent.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._complete) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parent } = this;\n    this._context = null;\n    this._parent = null;\n    _parent.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport interface MapSignature<T> {\n  <R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R>;\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T, R>(url: string, headers?: Object): Observable<R>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function() {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // open XHR first\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // now set up the events\n      this.setupEvents(xhr, request);\n\n      // finally send the request\n      if (body) {\n        xhr.send(body);\n      } else {\n        xhr.send();\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    xhr.ontimeout = function xhrTimeout(e) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    (<any>xhr.ontimeout).request = request;\n    (<any>xhr.ontimeout).subscriber = this;\n    (<any>xhr.ontimeout).progressSubscriber = progressSubscriber;\n\n    if (xhr.upload && 'withCredentials' in xhr && root.XDomainRequest) {\n      if (progressSubscriber) {\n        xhr.onprogress = function xhrProgress(e) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        (<any>xhr.onprogress).progressSubscriber = progressSubscriber;\n      }\n\n      xhr.onerror = function xhrError(e) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      (<any>xhr.onerror).request = request;\n      (<any>xhr.onerror).subscriber = this;\n      (<any>xhr.onerror).progressSubscriber = progressSubscriber;\n    }\n\n    xhr.onreadystatechange = function xhrReadyStateChange(e) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    (<any>xhr.onreadystatechange).subscriber = this;\n    (<any>xhr.onreadystatechange).progressSubscriber = progressSubscriber;\n    (<any>xhr.onreadystatechange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4) {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, recycle as an async action.\n    if (delay !== null && delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    let action: AsyncAction<any> = actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, enqueue as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport var errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const { _unsubscribe, _subscriptions } = (<any> this);\n\n    (<any> this)._subscriptions = null;\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        (errors = errors || []).push(errorObject.e);\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      let index = -1;\n      const len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(err.errors);\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let sub = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        sub = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (sub.closed || typeof sub.unsubscribe !== 'function') {\n          break;\n        } else if (this.closed) {\n          sub.unsubscribe();\n        } else {\n          ((<any> this)._subscriptions || ((<any> this)._subscriptions = [])).push(sub);\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    return sub;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n\n    // HACK: This might be redundant because of the logic in `add()`\n    if (subscription == null   || (\n        subscription === this) || (\n        subscription === Subscription.EMPTY)) {\n      return;\n    }\n\n    const subscriptions = (<any> this)._subscriptions;\n\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, recycle as an async action.\n    if (delay !== null && delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    let action: AsyncAction<any> = actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n","import { root } from '../util/root';\n\nexport let $$iterator: any;\n\nconst Symbol: any = root.Symbol;\n\nif (typeof Symbol === 'function') {\n  if (Symbol.iterator) {\n    $$iterator = Symbol.iterator;\n  } else if (typeof Symbol.for === 'function') {\n    $$iterator = Symbol.for('iterator');\n  }\n} else {\n    if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {\n      // Bug for mozilla version\n      $$iterator = '@@iterator';\n    } else if (root.Map) {\n      // es6-shim specific logic\n      let keys = Object.getOwnPropertyNames(root.Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        if (key !== 'entries' && key !== 'size' && root.Map.prototype[key] === root.Map.prototype['entries']) {\n          $$iterator = key;\n          break;\n        }\n      }\n    } else {\n      $$iterator = '@@iterator';\n    }\n}","let objectTypes = {\n  'boolean': false,\n  'function': true,\n  'object': true,\n  'number': false,\n  'string': false,\n  'undefined': false\n};\n\ndeclare let global: NodeJS.Global;\ndeclare let module: any;\ndeclare let exports: any;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\nexport let root: any = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n\nlet freeGlobal = objectTypes[typeof global] && global;\nif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n  root = freeGlobal;\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const $$observable = getSymbolObservable(root);","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/cache';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctKey';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {MulticastObservable} from './observable/MulticastObservable';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { $$rxSubscriber as rxSubscriber } from './symbol/rxSubscriber';\nimport { $$iterator as iterator } from './symbol/iterator';\nimport { $$observable as observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}