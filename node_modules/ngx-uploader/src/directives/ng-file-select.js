var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Directive, ElementRef, EventEmitter, Input, Output, HostListener, Inject } from '@angular/core';
import { NgUploaderService } from '../services/ngx-uploader';
import { NgUploaderOptions, UploadRejected } from '../classes/index';
var NgFileSelectDirective = (function () {
    function NgFileSelectDirective(el, uploader) {
        this.el = el;
        this.uploader = uploader;
        this.onUpload = new EventEmitter();
        this.onPreviewData = new EventEmitter();
        this.onUploadRejected = new EventEmitter();
        this.beforeUpload = new EventEmitter();
        this.files = [];
    }
    NgFileSelectDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (!this.options || !changes) {
            return;
        }
        if (this.options.allowedExtensions) {
            this.options.allowedExtensions = this.options.allowedExtensions.map(function (ext) { return ext.toLowerCase(); });
        }
        this.uploader.setOptions(new NgUploaderOptions(this.options));
        this.uploader._emitter.subscribe(function (data) {
            _this.onUpload.emit(data);
            if (data.done && _this.files && _this.files.length) {
                _this.files = [].filter.call(_this.files, function (f) { return f.name !== data.originalName; });
            }
            if (data.done && _this.uploader.opts.fieldReset) {
                _this.el.nativeElement.value = '';
            }
        });
        this.uploader._previewEmitter.subscribe(function (data) {
            _this.onPreviewData.emit(data);
        });
        this.uploader._beforeEmitter.subscribe(function (uploadingFile) {
            _this.beforeUpload.emit(uploadingFile);
        });
        if (this.events instanceof EventEmitter) {
            this.events.subscribe(function (data) {
                if (data === 'startUpload') {
                    _this.uploader.uploadFilesInQueue();
                }
            });
        }
    };
    NgFileSelectDirective.prototype.onChange = function () {
        var _this = this;
        this.files = this.el.nativeElement.files;
        if (!this.files || !this.files.length) {
            return;
        }
        if (this.options.filterExtensions && this.options.allowedExtensions && this.files && this.files.length) {
            this.files = [].filter.call(this.files, function (f) {
                var allowedExtensions = _this.options.allowedExtensions || [];
                if (allowedExtensions.indexOf(f.type.toLowerCase()) !== -1) {
                    return true;
                }
                var ext = f.name.split('.').pop();
                if (ext && allowedExtensions.indexOf(ext) !== -1) {
                    return true;
                }
                _this.onUploadRejected.emit({ file: f, reason: UploadRejected.EXTENSION_NOT_ALLOWED });
                return false;
            });
        }
        if (this.options.maxSize > 0) {
            this.files = [].filter.call(this.files, function (f) {
                if (f.size <= _this.options.maxSize) {
                    return true;
                }
                _this.onUploadRejected.emit({ file: f, reason: UploadRejected.MAX_SIZE_EXCEEDED });
                return false;
            });
        }
        if (this.options.maxUploads > 0 && this.files.length > this.options.maxUploads) {
            this.onUploadRejected.emit({ file: this.files.pop(), reason: UploadRejected.MAX_UPLOADS_EXCEEDED });
            this.files = [];
        }
        if (this.files && this.files.length) {
            this.uploader.addFilesToQueue(this.files);
        }
    };
    return NgFileSelectDirective;
}());
__decorate([
    Input(),
    __metadata("design:type", NgUploaderOptions)
], NgFileSelectDirective.prototype, "options", void 0);
__decorate([
    Input(),
    __metadata("design:type", EventEmitter)
], NgFileSelectDirective.prototype, "events", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NgFileSelectDirective.prototype, "onUpload", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NgFileSelectDirective.prototype, "onPreviewData", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NgFileSelectDirective.prototype, "onUploadRejected", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NgFileSelectDirective.prototype, "beforeUpload", void 0);
__decorate([
    HostListener('change'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NgFileSelectDirective.prototype, "onChange", null);
NgFileSelectDirective = __decorate([
    Directive({
        selector: '[ngFileSelect]',
        providers: [
            NgUploaderService
        ],
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(NgUploaderService)),
    __metadata("design:paramtypes", [ElementRef,
        NgUploaderService])
], NgFileSelectDirective);
export { NgFileSelectDirective };
//# sourceMappingURL=ng-file-select.js.map