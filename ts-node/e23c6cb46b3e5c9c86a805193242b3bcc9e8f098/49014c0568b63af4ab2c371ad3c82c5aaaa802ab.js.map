{"version":3,"file":"/Users/sorynsoo/Desktop/OneForCode/gulpfile.ts","sources":["/Users/sorynsoo/Desktop/OneForCode/gulpfile.ts"],"names":[],"mappings":"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","sourcesContent":["import * as gulp from 'gulp';\nimport * as util from 'gulp-util';\nimport * as runSequence from 'run-sequence';\n\nimport Config from './tools/config';\nimport { loadTasks } from './tools/utils';\n\n\nloadTasks(Config.SEED_TASKS_DIR);\nloadTasks(Config.PROJECT_TASKS_DIR);\n\n\n// --------------\n// Build dev.\ngulp.task('build.dev', (done: any) =>\n  runSequence('clean.once',\n//              'tslint',\n              'build.assets.dev',\n              'build.html_css',\n              'build.js.dev',\n              'build.index.dev',\n              done));\n\n// --------------\n// Build dev watch.\ngulp.task('build.dev.watch', (done: any) =>\n  runSequence('build.dev',\n              'watch.dev',\n              done));\n\n// --------------\n// Build e2e.\ngulp.task('build.e2e', (done: any) =>\n  runSequence('clean.e2e',\n              'tslint',\n              'build.js.e2e',\n              done));\n\n// --------------\n// Build prod.\ngulp.task('build.prod', (done: any) =>\n  runSequence('check.tools',\n              'clean.prod',\n              'tslint',\n              'build.assets.prod',\n              'build.html_css',\n              'copy.prod',\n              'build.js.prod',\n              'build.bundles',\n              'build.bundles.app',\n              'minify.bundles',\n              'build.index.prod',\n              done));\n\n// --------------\n// Build prod.\ngulp.task('build.prod.exp', (done: any) =>\n  runSequence('check.tools',\n              'clean.prod',\n              'tslint',\n              'build.assets.prod',\n              'build.html_css',\n              'copy.prod',\n              'compile.ahead.prod',\n              'build.js.prod.exp',\n              'build.bundles',\n              'build.bundles.app.exp',\n              'minify.bundles',\n              'build.index.prod',\n              done));\n\n// --------------\n// Build test.\ngulp.task('build.test', (done: any) =>\n  runSequence('clean.once',\n//              'tslint',\n              'build.assets.dev',\n              'build.html_css',\n              'build.js.dev',\n              'build.js.test',\n              'build.index.dev',\n              done));\n\n// --------------\n// Build test watch.\ngulp.task('test.watch', (done: any) =>\n  runSequence('build.test',\n              'watch.test',\n              'karma.watch',\n              done));\n\n\n// --------------\n// Docs\n// gulp.task('docs', (done: any) =>\n//   runSequence('build.docs',\n//               'serve.docs',\n//               done));\n\n// --------------\n// Serve dev\ngulp.task('serve.dev', (done: any) =>\n  runSequence('build.dev',\n              'server.start',\n              'watch.dev',\n              done));\n\n// --------------\n// Serve e2e\ngulp.task('serve.e2e', (done: any) =>\n  runSequence(\n              'tslint',\n              'build.dev',\n              'build.js.e2e',\n              'server.start',\n              'watch.dev',\n              'watch.e2e',\n              done));\n\n\n// --------------\n// Serve prod\ngulp.task('serve.prod', (done: any) =>\n  runSequence('build.prod',\n              'server.prod',\n              done));\n\n\n// --------------\n// Serve prod exp\ngulp.task('serve.prod.exp', (done: any) =>\n  runSequence('build.prod.exp',\n              'server.prod',\n              done));\n\n// --------------\n// Test.\ngulp.task('test', (done: any) =>\n  runSequence('build.test',\n              'karma.run',\n              done));\n\n// --------------\n// Clean directories after i18n\n// TODO: find a better way to do it\ngulp.task('clean.i18n', (done: any) =>\n  runSequence('clear.files',\n              done));\n\n// --------------\n// Clean dev/coverage that will only run once\n// this prevents karma watchers from being broken when directories are deleted\nlet firstRun = true;\ngulp.task('clean.once', (done: any) => {\n  if (firstRun) {\n    firstRun = false;\n    runSequence('check.tools', 'clean.dev', 'clean.coverage', done);\n  } else {\n    util.log('Skipping clean on rebuild');\n    done();\n  }\n});\n\n"]}