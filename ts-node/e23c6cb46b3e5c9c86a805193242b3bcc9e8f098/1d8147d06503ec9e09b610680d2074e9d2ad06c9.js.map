{"version":3,"file":"/Users/sorynsoo/Desktop/OneForCode/tools/utils/seed/tasks_tools.ts","sources":["/Users/sorynsoo/Desktop/OneForCode/tools/utils/seed/tasks_tools.ts"],"names":[],"mappings":"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","sourcesContent":["import { existsSync, lstatSync, readdirSync } from 'fs';\nimport * as gulp from 'gulp';\nimport * as util from 'gulp-util';\nimport * as isstream from 'isstream';\nimport { join } from 'path';\nimport * as tildify from 'tildify';\n\nimport { changeFileManager } from './code_change_tools';\nimport { Task } from '../../tasks/task';\n\n/**\n * Loads the tasks within the given path.\n * @param {string} path - The path to load the tasks from.\n */\nexport function loadTasks(path: string): void {\n  util.log('Loading tasks folder', util.colors.yellow(path));\n  readDir(path, taskname => registerTask(taskname, path));\n}\n\nfunction normalizeTask(task: any, taskName: string) {\n  if (task instanceof Task) {\n    return task;\n  }\n  if (task.prototype && task.prototype instanceof Task) {\n    return new task();\n  }\n  if (typeof task === 'function') {\n    return new class AnonTask extends Task {\n      run(done: any) {\n        if (task.length > 0) {\n          return task(done);\n        }\n\n        const taskReturnedValue = task();\n        if (isstream(taskReturnedValue)) {\n          return taskReturnedValue;\n        }\n\n        done();\n      }\n    };\n  }\n  throw new Error(taskName + ' should be instance of the class ' +\n    'Task, a function or a class which extends Task.');\n}\n\n/**\n * Registers the task by the given taskname and path.\n * @param {string} taskname - The name of the task.\n * @param {string} path     - The path of the task.\n */\nfunction registerTask(taskname: string, path: string): void {\n  const TASK = join(path, taskname);\n  util.log('Registering task', util.colors.yellow(tildify(TASK)));\n\n  gulp.task(taskname, (done: any) => {\n    const task = normalizeTask(require(TASK), TASK);\n\n    if (changeFileManager.pristine || task.shallRun(changeFileManager.lastChangedFiles)) {\n      const result = task.run(done);\n      if (result && typeof result.catch === 'function') {\n        result.catch((e: any) => {\n          util.log(`Error while running \"${TASK}\"`, e);\n        });\n      }\n      return result;\n    } else {\n      done();\n    }\n  });\n}\n\n/**\n * Reads the files in the given root directory and executes the given callback per found file.\n * @param {string}   root - The root directory to read.\n * @param {function} cb   - The callback to execute per found file.\n */\nfunction readDir(root: string, cb: (taskname: string) => void) {\n  if (!existsSync(root)) {\n    return;\n  }\n\n  walk(root);\n\n  function walk(path: string) {\n    let files = readdirSync(path);\n    for (let i = 0; i < files.length; i += 1) {\n      let file = files[i];\n      let curPath = join(path, file);\n      if (lstatSync(curPath).isFile() && /\\.ts$/.test(file)) {\n        let taskname = file.replace(/\\.ts$/, '');\n        cb(taskname);\n      }\n    }\n  }\n}\n"]}